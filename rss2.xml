<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AcidF0x&#39;s Nest</title>
    <link>https://acidf0x.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>AcidF0x&#39;s Dev Blog</description>
    <pubDate>Tue, 17 Sep 2019 21:13:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>C# - 현재 경로(Directory.GetCurrentDirectory) 참고시 주의사항</title>
      <link>https://acidf0x.github.io/2019/09/03/do-not-use-Directory-GetCurrentDirectory/</link>
      <guid>https://acidf0x.github.io/2019/09/03/do-not-use-Directory-GetCurrentDirectory/</guid>
      <pubDate>Tue, 03 Sep 2019 09:45:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;최근 팔자에도 없는 C# 외주 개발을 맡아 최근에 바쁜 관계로 꿈을 가지고 만들었던 블로그가 방치되고있었다 (변명;;)&lt;br&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>최근 팔자에도 없는 C# 외주 개발을 맡아 최근에 바쁜 관계로 꿈을 가지고 만들었던 블로그가 방치되고있었다 (변명;;)<br>뭐라도 작성해야겠다 생각하여 외주 작업중 배운것 블로그에 기록하고자 한다.  </p><h2 id="문제-내용"><a href="#문제-내용" class="headerlink" title="문제 내용"></a>문제 내용</h2><p>어플리케이션이 실행시 프로그램이 설치된 경로의 xml파일을 읽고, 쓰는 작업중 이상하게 시작 프로그램에 등록할때만 파일을 접근할수가 없었다.<br>처음에는 권한 문제로 의심하여 프로그램 자동실행 방법을 레지스트리, 스케쥴러, 시작프로그램에 등록등 모든 방법을 사용해보고 심지어 UAC(…)도 꺼보고 실행해도 동일한 문제가 반복되었다.<br>그후 소스코드 설정파일의 경로를 출력해보니 아래와 같이 엉뚱한 경로가 나왔다.<br><img src="/images/getcurrentdir.png" alt="Directory.GetCurrentDirectory"></p><p>특이한것은 프로그램을 직접 실행하면 문제가 없었다(…)<br>구글링후 현재 프로그램 실행 파일의 위치를 가져오는 방법을 검색해서 몇가지 테스트했을때 결과는 아래와 같았다. </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> Test1 = System.Environment.CurrentDirectory;</span><br><span class="line"><span class="keyword">string</span> Test2 = System.Reflection.Assembly.GetExecutingAssembly().Location;</span><br><span class="line"><span class="keyword">string</span> Test3 = System.AppDomain.CurrentDomain.BaseDirectory or System.Environment.CurrentDirectory;</span><br><span class="line"><span class="keyword">string</span> Test4 = System.IO.Directory.GetCurrentDirectory;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#결과</span><br><span class="line">#Test1</span><br><span class="line">&quot;C:\Windows\SysWOW64&quot;</span><br><span class="line">#Test2</span><br><span class="line">&quot;C:\Program Files\Test\Test.exe&quot;</span><br><span class="line">#Test3</span><br><span class="line">&quot;C:\Program Files\Test\&quot;</span><br><span class="line">#Test4</span><br><span class="line">&quot;C:\Windows\SysWOW64&quot;</span><br></pre></td></tr></table></figure><p><code>System.Environment.CurrentDirectory</code>와 <code>System.IO.Directory.GetCurrentDirectory</code>는 현재<code>작업</code>중인 경로를 가져오는것으로<br>시작 프로그램에서 등록하는 경우 <code>C:\Windows\SysWOW64</code>의 어떠한 프로세스가 실행 시키므로 현재 경로가 이상하게 출력되는 것으로 예상된다. (<code>svchost.exe</code>로 예상된다.)<br>Window에 대해 조금더 공부해야겠다는 생각이 들었다…</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p><code>Directory.GetCurrentDirectory</code>는 실행 환경에 따라 경로가 다르다. 유의하고 사용하자!</p>]]></content:encoded>
      
      <comments>https://acidf0x.github.io/2019/09/03/do-not-use-Directory-GetCurrentDirectory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>lodash - throttle vs debounce</title>
      <link>https://acidf0x.github.io/2019/01/24/Lodash-throttle-vs-debounce/</link>
      <guid>https://acidf0x.github.io/2019/01/24/Lodash-throttle-vs-debounce/</guid>
      <pubDate>Thu, 24 Jan 2019 06:55:41 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/lodash.png&quot; alt=&quot;lodash&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;들어가기-전에&quot;&gt;&lt;a href=&quot;#들어가기-전에&quot; class=&quot;headerlink&quot; title=&quot;들어가기 전에&quot;&gt;&lt;/a&gt;들어가기 전에&lt;/h1&gt;&lt;p
        
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="/images/lodash.png" alt="lodash"></p><h1 id="들어가기-전에"><a href="#들어가기-전에" class="headerlink" title="들어가기 전에"></a>들어가기 전에</h1><p>자바스크립트를 특성상 이벤트는 연속적으로 발생한다. (eg. <code>scroll</code>, <code>resize</code>, <code>keydown</code>) 기본적으로 이 이벤트들의 발생량을 제어 할 수 없으며 심지어 엄청나게 많이 발생하는 경우도 있다.<br>(<code>window</code>에 <code>onresize</code>이벤트의 리스너에 <code>console.log()</code>를 걸고 화면을 줄였다 늘였다 해보자.)<br>만약 작업이 느리거나 무거운 경우 과도한 이벤트로인해 퍼포먼스가 심각하게 떨어지는것은 당연한 일이다, 따라서 많은 이벤트가 발생하더라도 퍼포먼스에 문제가 없도록 제어할 수있는 <code>Throttle</code>과 <code>Debounce</code>의 차이에 대하여 간략하게 정리해보고자 한다.</p><h1 id="Throttle"><a href="#Throttle" class="headerlink" title="Throttle"></a>Throttle</h1><p><code>Throttle</code>은 특정시간마다 이벤트 발생량을 일정하게 제어 할수 있는 기능이다.<br>만약 개발중인 사이트에서 스크롤을 올리거나 내릴때 혹은 뷰포트 사이즈가 변경 될 때마다 무겁거나 복잡한 작업을 한다면 이벤트의 발생량이 많기 때문에 퍼포먼스의 문제가 발생할 요지가 있다, 그럴 경우 <code>Throttle</code>을 사용하여 특정시간마다 한번씩 이벤트를 발생 하게 할 수 있다. </p><p>아래 코드펜의 예제를 통해 쉽게 이해 할 수 있다. 이벤트가 1초마다 발생하고 2초 단위로 throttle을 설정 했을때를 가정하고 만들었다.<br><iframe id="cp_embed_bzNjEz" src="//codepen.io/anon/embed/bzNjEz?height=600&theme-id=dark&slug-hash=bzNjEz&default-tab=result&embed-version=2" scrolling="no" frameborder="no" height="600" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><p>추가적으로 <code>Throttle</code>의 옵션인 <code>leading</code>과 <code>trailing</code>에 대해서도 쉽게 이해 할 수 있다.<br><code>lodash</code>의 경우 <code>leading</code>과 <code>trailing</code>의 기본값이 <code>true</code>이므로 원하는 옵션을 제어하자 </p><h1 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h1><p><code>Debounce</code>는 연속되는 이벤트가 더 이상 발생하지 않을경우 때 액션을 실행 하고자 할때 유용하다.<br>가장 익숙한 예로는 보통 회원 가입시 이메일의 중복 확인이나 검색 필드의 자동완성의 경우다, <code>input</code>의 <code>change</code> 이벤트가 발생 할때마다 매번 <code>Ajax Call</code>이 실행 되는 경우<br>불 필요한 통신과 BackEnd의 자원까지 낭비시키게 될 것이다. 이 경우 <code>Debounce</code>가 유용할 것이다.</p><iframe id="cp_embed_MLwLgV" src="//codepen.io/anon/embed/MLwLgV?height=300&theme-id=dark&slug-hash=MLwLgV&default-tab=result&embed-version=2" scrolling="no" frameborder="no" height="300" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><p><code>Throttle</code> <strong>특정시간마다 이벤트 발생량을 일정하게 제어해야 하는 경우 (eg. Scroll Event, Viewport Size Event)</strong><br><code>Debounce</code> <strong>연속적인 이벤트가 발생후 마지막 이벤트로 부터 특정시간 이후 작업을 실행하는 경우 (eg. Ajax Call)</strong></p><iframe id="cp_embed_RvNxQN" src="//codepen.io/anon/embed/RvNxQN?height=500&theme-id=dark&slug-hash=RvNxQN&default-tab=result&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content:encoded>
      
      <comments>https://acidf0x.github.io/2019/01/24/Lodash-throttle-vs-debounce/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
